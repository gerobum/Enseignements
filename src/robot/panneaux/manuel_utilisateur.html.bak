<!--
To change this template, choose Tools | Templatesand open the template in the editor.
--><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Nono, le robot explorateur</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  </head>
  <body>
    <h1 align="center"> Nono, le robot explorateur</h1>
    <h1>Préambule</h1>
    <p> Ce petit programme propose une initiation ludique à l'écriture
      d'algorithmes. L'idée n'est pas originale. Elle s'inspire d'autres
      amusants outils d'apprentissage de la programmation comme, <a href="http://el.media.mit.edu/logo-foundation/logo/index.html">Logo</a>,
      le plus célèbre Il s'agit de programmer un petit robot explorateur pour
      l'envoyer sur une planète lointaine à la recherche de minerai en évitant
      les embûches. Ce petit jeu a pour but d'introduire la programmation
      structurée de façon progressive. </p>
    <h1>Environnement du robot</h1>
    <p> Le robot exécute son programme pour évoluer sur une "planète"
      rectangulaire délimitée par un mur,et quadrillée en cases. Elle est de
      dimension finie et supérieure à 3 x 3 cases. La distance entre deux cases
      est celle parcourue par le robot en un pas. En cas de présence de minerai,
      il se trouve sur une et une seule case. </p>
    <h1>"Atterissage" ou initialisation</h1>
    <p> Il est possible de prévoir de façon plus ou moins précise le lieu
      d'atterissage du robot, son orientation ainsi que l'existence de minerai
      et le lieu ou il est éventuellement enfoui. </p>
    <p> La connaissance a priori de ces situations se simule à l'aide d'une
      boîte de dialogue appelée en cliquant le bouton intitulé "initialisation </p>
    <img src="images/initialisation.png" alt="initialisation" height="413" width="550">
    <ul>
      <li> Au départ, le robot peut se trouver contre un mur ou pas, dans un
        coin très précis, comme le coin nord-est, ou dans un coin (sans plus de
        précision), ou encore n’importe où. </li>
      <li> Il peut avoir ou non une orientation précise (nord, est, sud, ouest).
      </li>
      <li> Le minerai peut être présent ou pas. En sa présence, sa position peut
        être plus ou moins précise, tout comme celle du robot. </li>
      <li> Les dimensions du terrain peuvent être inconnues et donc choisies
        aléatoirement. Mais il est possible aussi de fixer la largeur et/ou la
        hauteur. </li>
    </ul>
    <p> Par exemple, l'initialisation suivante : <br>
      <img src="images/exemple-initialisation.png" alt="exemple-initialisation"
        height="413" width="550"> </p>
    <p> pourra donner la situation suivante : <br>
      <img src="images/resultat-initialisation.png" alt="exemple-initialisation"
        height="630" width="1200"> </p>
    <p> L'utilisation de la boite de dialogue et les choix dans les listes sont
      suffisamment explicites. Essayez-la pour commencer. </p>
    <h1>Le robot explorateur</h1>
    <p> Le robot obéit à quatre instructions élémentaires : </p>
    <ul>
      <li>Tourne, le robot tourne d’un quart de tour dans le sens des aiguilles
        d’une montre.</li>
      <li>Avance, le robot avance d’un pas droit devant lui</li>
      <li>Marque, le robot marque la case sur laquelle il se trouve. Si la case
        est déjà marquée, elle le reste.</li>
      <li>Efface, le robot efface la marque de la case sur laquelle il se
        trouve. Si elle n’est pas marquée, elle le reste.</li>
    </ul>
    <strong>Attention, si une marque est posée sur du minerai, il sera
      définitivement perdu, même en effaçant la marque.</strong>
    <h1>Contrôle de l’environnement</h1>
    Sans précaution, le robot court à sa destruction car il est fragile. Il sera
    détérioré au moindre choc. Pour éviter ça, mais aussi pour trouver son
    chemin et l'éventuel minerai, votre robot possède des capteurs lui
    permettant de connaître un peu son environnement. Ces différents capteurs
    permettent au programme de poser les questions suivantes.
    <ul>
      <li>devant mur ? La réponse est OUI s'il y a un mur JUSTE devant le robot.</li>
      <li>devant marque ? La réponse est OUI s'il y a une marque JUSTE devant le
        robot.</li>
      <li>sur marque ? La réponse est OUI si la case sous le robot est marquée.</li>
      <li>sur minerai ? La réponse est OUI s'il y a du minerai sous le robot.</li>
      <li>Il existe la négation de chacune des questions en faisant précéder par
        le mot "pas" (pas devant mur…)</li>
    </ul>
    <h1>Le langage</h1>
    Le langage que comprend le robot se décrit sous la forme « d'une
    arborescence structurée » et combine les instructions décrites dans la
    suite. Chacune d'elle possède zéro, une ou plusieurs sorties, chaque
    sortie étant "connectée" à une instruction.
    <ul>
      <li> Les instructions élémentaires n'ont pas de sortie, elle se représente
        par l'un des mots suivants :
        <ul>
          <li>Tourne</li>
          <li>Avance</li>
          <li>Marque</li>
          <li>Efface</li>
        </ul>
        Lorsqu'une instruction élémentaire est traitée, le robot l'exécute : il
        fait un quart de tour, ou il avance d'un pas, ou il pose une marque
        (sous lui) ou il efface la marque (sous lui).</li>
      <br>
    </ul>
    <hr>
    <ul>
      <br>
      <li> L'instruction "bloc" ou le bloc d’instructions a autant de sorties
        que nécessaire. <br>
        <br>
        <table border="0">
          <thead>
            <tr>
              <th align="justify">Il se représente par un rectangle et plusieurs
                sorties (les flèches). </th>
              <th><img src="images/bloc.PNG" alt="bloc" height="55" width="89"></th>
              <th align="justify"><br>
              </th>
            </tr>
            <tr>
              <td colspan="2" rowspan="1">Le traitement d'un bloc consiste à
                traiter les instructions branchées à ses sorties dans l'ordre de
                la gauche vers la droite.</td>
              <td><br>
              </td>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </li>
      <br>
    </ul>
    <hr>
    <ul>
      <li> L'instruction conditionnelle a au moins une sortie, appelée "alors"
        et éventuellement une deuxième sortie, appelée "sinon".
        <table border="0">
          <thead>
            <tr>
              <th align="justify">L'instruction conditionnelle se représente à
                l'image d'une des deux figures ci-contre.
                <br>
                La question C peut prendre les valeurs vues précédemment :
                "devant mur", "sur minerai"... <br>
                <br>
              </th>
              <th> <img src="images/sialors.PNG" alt="sialors" height="51" width="83"></th>
              <th><img src="images/sialorssinon.PNG" alt="sialorssinon" height="51"
                  width="83"></th>
            </tr>
            <tr>
              <td colspan="3" rowspan="1">Son traitement se fait ainsi :<br>
                <ul>
                  <li>Si la réponse à C est OUI, la branche de gauche est
                    traitée.</li>
                  <li>Si la réponse à C est NON, la branche de droite est
                    traitée (seulement si elle existe, évidemment).</li>
                </ul>
              </td>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </li>
      <br>
    </ul>
    <hr>
    <ul>
      <li>L'instruction itérative "Tant que" a une et seule sortie.
        <table border="0">
          <thead>
            <tr>
              <th align="justify">L'instruction itérative "Tant que" se
                représente à l'image de la figure ci-contre.
                <br>
                La question C peut prendre les valeurs vues précédemment :
                "devant mur", "sur minerai"... </th>
              <th><img src="images/tantque.PNG" alt="tantque" height="55" width="71">
              </th>
            </tr>
            <tr>
              <td>Son traitement se fait ainsi : Tant que la réponse à C&nbsp;
                est oui, la sortie est traitée.<br>
                Ou plus exactement, si la réponse à la condition est OUI,
                l'instruction indiquée par la sortie <br>
                est traitée, puis la condition C est réévaluée, si sa réponse
                est toujours OUI, la sortie est traitée<br>
                et ainsi de suite jusqu'à ce que la réponse à C donne NON. <br>
                Remarque : <br>
                <ul>
                  <li>Il est possible de ne pas "rentrer" dans la "boucle" si C
                    donne NON dès le départ.</li>
                  <li>Il est possible de ne jamais sortir de la boucle si la
                    réponse à C est toujours OUI.</li>
                </ul>
              </td>
              <td><br>
                <br>
              </td>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </li>
      <br>
    </ul>
    <hr><br>
    <ul>
      <li>
        <p>Un exemple de programme :</p>
        <img src="images/exempleProgramme.PNG" alt="exempleProgramme" height="280"
          width="268"> </li>
    </ul>
    <h1>Mode de construction </h1>
    <p> Un programme commence toujours par un bloc. Une sortie pointe
      nécessairement sur une instruction (élémentaire, un bloc, un si, un tant
      que). Le programme forme un arbre d'instructions dont la racine est un
      bloc (le bloc dit "principal") et dont les feuilles sont des instructions
      élémentaires.
    </p>
    <h1>Mode d’exécution du programme</h1>
    <p> Le programme s’exécute en commençant par la racine, de haut en bas et de
      la gauche vers la droite.
    </p>
  </body>
</html>
