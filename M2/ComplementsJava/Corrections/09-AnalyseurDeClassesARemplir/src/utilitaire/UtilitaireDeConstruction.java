//??????????????????????????????????????????????????????????????????????????????
package utilitaire;

import dialogue.DialogueCreationValeurQuelconque;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UtilitaireDeConstruction {
  
  private final static Map<String, Class> pprimitive = new HashMap<>();
  public final static Map<String, Class> primitive;

  static {
    pprimitive.put("int", int.class);
    pprimitive.put("byte", byte.class);
    pprimitive.put("short", short.class);
    pprimitive.put("long", long.class);
    pprimitive.put("char", char.class);
    pprimitive.put("boolean", boolean.class);
    pprimitive.put("float", float.class);
    pprimitive.put("double", double.class);

    pprimitive.put("int[]", new int[0].getClass());
    pprimitive.put("byte[]", new byte[0].getClass());
    pprimitive.put("short[]", new short[0].getClass());
    pprimitive.put("long[]", new long[0].getClass());
    pprimitive.put("char[]", new char[0].getClass());
    pprimitive.put("boolean[]", new boolean[0].getClass());
    pprimitive.put("float[]", new float[0].getClass());
    pprimitive.put("double[]", new double[0].getClass());
    
    primitive = Collections.unmodifiableMap(pprimitive);
  }
  
  /**
   * Invoquer la méthode m de l'objet o et retourner son résultat éventuel.
   * Si cette méthode retourne void, l'objet retourné est null.
   * Si cette méthode est statique, o est null.
   * Pour définir les arguments nécessaires à l'appel de m il faut utiliser
   * DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
   * @param o l'objet sur lequel s'applique la méthode ou null si elle est statique
   * @param m la méthode à invoquer
   * @return le résutat de la méthode ou null en l'absence de résultat
   */
  public static Object invocation(Object o, Method m) {
    List<Object> listeParam = new LinkedList<>();
    /*??????????????????????????????????????????????????????????????????????????
     * Pour définir les arguments nécessaires à l'appel de m il faut utiliser
     * DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
     */
    return null;
    //??????????????????????????????????????????????????????????????????????????
  }
  
/**
 * Construire et retourner un objet à l'aide du contructeur k.
 * 
 * @param k le constructeur 
 * @return l'objet contruit
 */
  public static Object constructionInstance(Constructor<?> k) {
    Object valeur = null;
    //??????????????????????????????????????????????????????????????????????????
    // Un objet est construit à l'aide de k. Si des arguments sont nécessaires
    // DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
    //??????????????????????????????????????????????????????????????????????????
    return valeur;
  }
}
