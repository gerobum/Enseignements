//??????????????????????????????????????????????????????????????????????????????
package utilitaire;

import dialogue.DialogueCreationValeurQuelconque;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UtilitaireDeConstruction {

  public final static Map<String, Class> primitive;

  static {
    Map<String, Class> p = new HashMap<>();
    p.put("int", int.class);
    p.put("byte", byte.class);
    p.put("short", short.class);
    p.put("long", long.class);
    p.put("char", char.class);
    p.put("boolean", boolean.class);
    p.put("float", float.class);
    p.put("double", double.class);

    p.put("int[]", new int[0].getClass());
    p.put("byte[]", new byte[0].getClass());
    p.put("short[]", new short[0].getClass());
    p.put("long[]", new long[0].getClass());
    p.put("char[]", new char[0].getClass());
    p.put("boolean[]", new boolean[0].getClass());
    p.put("float[]", new float[0].getClass());
    p.put("double[]", new double[0].getClass());

    primitive = Collections.unmodifiableMap(p);
  }

  /**
   * Invoquer la méthode m de l'objet o et retourner son résultat éventuel. Si
   * cette méthode retourne void, l'objet retourné est null. Si cette méthode
   * est statique, o est null. Pour définir les arguments nécessaires à l'appel
   * de m il faut utiliser DialogueCreationValeurQuelconque dcvq = new
   * DialogueCreationValeurQuelconque(c);
   *
   * @param o l'objet sur lequel s'applique la méthode ou null si elle est
   * statique
   * @param m la méthode à invoquer
   * @return le résutat de la méthode ou null en l'absence de résultat
   */
  public static Object invocation(Object o, Method m) {
    //??????????????????????????????????????????????????????????????????????????
    List<Object> listeParam = new LinkedList<>();
    /*??????????????????????????????????????????????????????????????????????????
     * Pour définir les arguments nécessaires à l'appel de m il faut utiliser
     * DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
     */
    for (Class c : m.getParameterTypes()) {
      DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
      listeParam.add(dcvq.getValeur());
    }
    try {
      return m.invoke(o, listeParam.toArray());
    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NullPointerException ex) {
      return null;
    }
    //??????????????????????????????????????????????????????????????????????????
  }

  /**
   * Construire et retourner un objet à l'aide du contructeur k.
   *
   * @param k le constructeur
   * @return l'objet contruit
   */
  public static Object constructionInstance(Constructor<?> k) {
    Object valeur = null;
    //??????????????????????????????????????????????????????????????????????????
    // Un objet est construit à l'aide de k. Si des arguments sont nécessaires
    // DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
    if (k == null) {
      return null;
    }
    if (k.getParameterTypes().length == 0) {
      try {
        valeur = k.newInstance();
      } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
        Logger.getLogger(UtilitaireDeConstruction.class.getName()).log(Level.SEVERE, null, ex);
      }
    }

    List<Object> listeParam = new LinkedList<>();

    for (Class c : k.getParameterTypes()) {
      DialogueCreationValeurQuelconque dcvq = new DialogueCreationValeurQuelconque(c);
      listeParam.add(dcvq.getValeur());
    }
    try {
      valeur = k.newInstance(listeParam.toArray());
    } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
    }
    //??????????????????????????????????????????????????????????????????????????
    return valeur;
  }
}
